// Modal and Table Management
document.getElementById("addButton").onclick = function() {
    document.getElementById("addShipmentFormModal").style.display = "block";
};

document.querySelector(".close").onclick = function() {
    document.getElementById("addShipmentFormModal").style.display = "none";
};

document.querySelector(".close-notification").onclick = function() {
    document.getElementById("notificationModal").style.display = "none";
};

document.getElementById("addLineButton").onclick = function() {
    addLine();
};

document.getElementById("cancelLineButton").onclick = function() {
    clearLineInputs();
};

document.getElementById("addShipmentForm").onsubmit = function(event) {
    event.preventDefault(); // Prevent form submission
    submitShipment();
};

let currentEditRow = null; // Track the row being edited

// Add or update a line in the shipment
function addLine() {
    const productId = document.getElementById("product_id").value;
    const quantity = document.getElementById("quantity").value;

    // Validation: Check for empty fields
    if (!productId || !quantity) {
        showNotification("Please fill in both product ID and quantity.");
        return;
    }

    const lineTable = document.getElementById("lineTable").getElementsByTagName("tbody")[0];

    if (currentEditRow) {
        // If editing a row, update it
        currentEditRow.cells[0].innerText = productId;
        currentEditRow.cells[1].innerText = quantity;
        currentEditRow = null;
        document.getElementById("addLineButton").innerText = "Add Line"; // Reset button text
    } else {
        // Otherwise, add a new row
        const newRow = lineTable.insertRow();
        newRow.insertCell(0).innerText = productId;
        newRow.insertCell(1).innerText = quantity;

        // Create Edit and Delete buttons
        const actionCell = newRow.insertCell(2);
        const editButton = createButton('edit-btn', '<i class="fas fa-edit"></i>', function() { editLine(newRow); });
        const deleteButton = createButton('delete-btn', '<i class="fas fa-trash"></i>', function() { deleteShipmentLine(newRow); });
        actionCell.appendChild(editButton);
        actionCell.appendChild(deleteButton);
    }

    clearLineInputs(); // Clear form after adding/updating
}

// Helper function to create buttons with given classes and actions
function createButton(className, iconHtml, clickHandler) {
    const button = document.createElement("button");
    button.className = `action-btn ${className}`;
    button.innerHTML = iconHtml;
    button.onclick = clickHandler;
    return button;
}

// Edit a selected line
function editLine(row) {
    currentEditRow = row;
    document.getElementById("product_id").value = row.cells[0].innerText;
    document.getElementById("quantity").value = row.cells[1].innerText;
    document.getElementById("addLineButton").innerText = "Update Line";
}

// Delete a selected line
function deleteShipmentLine(row) {
    const lineTable = document.getElementById("lineTable").getElementsByTagName("tbody")[0];
    lineTable.deleteRow(row.rowIndex - 1);
    if (!currentEditRow) {
        document.getElementById("addLineButton").innerText = "Add Line"; // Reset button text if not editing
    }
}

// Clear inputs
function clearLineInputs() {
    document.getElementById("product_id").value = '';
    document.getElementById("quantity").value = '';
}

// Submit the shipment form
function submitShipment() {
    const documentNo = document.getElementById("document_no").value;
    const documentDate = document.getElementById("document_date").value;
    const customerId = document.getElementById("customer_id").value;

    const lineTable = document.getElementById("lineTable").getElementsByTagName("tbody")[0];
    const lineRows = lineTable.rows;

    if (lineRows.length === 0) {
        showNotification("Please add at least one product line.");
        return;
    }

    const combinedTable = document.getElementById("combinedTable").getElementsByTagName("tbody")[0];

    // Add a new row to the combined table (without Product ID and Quantity)
    const newRow = combinedTable.insertRow();
    newRow.insertCell(0).innerHTML = `<input type="checkbox">`; // Checkbox for selection
    newRow.insertCell(1).innerText = documentNo;
    newRow.insertCell(2).innerText = documentDate;
    newRow.insertCell(3).innerText = customerId;
    newRow.insertCell(4).innerText = "Admin"; // Created By
    newRow.insertCell(5).innerText = "Admin"; // Updated By

    // Store the Product ID and Quantity in the dataset (not displayed in the table)
    const products = [];
    for (let row of lineRows) {
        const productId = row.cells[0].innerText;
        const quantity = row.cells[1].innerText;
        products.push({ productId, quantity });
    }
    newRow.dataset.lines = JSON.stringify(products); // Store as JSON string

    // Create action buttons (Edit, View, Delete)
    const actionCell = newRow.insertCell(6);
    const editButton = createButton('edit-btn', '<i class="fas fa-edit"></i>', function() { editCombinedShipment(newRow); });
    const viewButton = createButton('view-btn', '<i class="fas fa-eye"></i>', function() { viewShipment(newRow); });
    const deleteButton = createButton('delete-btn', '<i class="fas fa-trash"></i>', function() { deleteShipmentRow(newRow); });
    actionCell.appendChild(editButton);
    actionCell.appendChild(viewButton);
    actionCell.appendChild(deleteButton);

    // Reset the form and close modal
    document.getElementById("addShipmentForm").reset();
    clearLineInputs();
    document.getElementById("addShipmentFormModal").style.display = "none";
}

// Edit combined shipment row
function editCombinedShipment(row) {
    const documentNo = row.cells[1].innerText;
    const documentDate = row.cells[2].innerText;
    const customerId = row.cells[3].innerText;

    document.getElementById("document_no").value = documentNo;
    document.getElementById("document_date").value = documentDate;
    document.getElementById("customer_id").value = customerId;

    // Load product lines from the dataset
    const products = JSON.parse(row.dataset.lines);
    const lineTable = document.getElementById("lineTable").getElementsByTagName("tbody")[0];
    lineTable.innerHTML = ''; // Clear existing lines

    products.forEach(product => {
        const newRow = lineTable.insertRow();
        newRow.insertCell(0).innerText = product.productId;
        newRow.insertCell(1).innerText = product.quantity;

        // Create Edit and Delete buttons
        const actionCell = newRow.insertCell(2);
        const editButton = createButton('edit-btn', '<i class="fas fa-edit"></i>', function() { editLine(newRow); });
        const deleteButton = createButton('delete-btn', '<i class="fas fa-trash"></i>', function() { deleteShipmentLine(newRow); });
        actionCell.appendChild(editButton);
        actionCell.appendChild(deleteButton);
    });

    document.getElementById("addShipmentFormModal").style.display = "block"; // Show modal for editing
}

// View shipment details
function viewShipment(row) {
    const documentNo = row.cells[1].innerText;
    const documentDate = row.cells[2].innerText;
    const customerId = row.cells[3].innerText;

    document.getElementById("viewDocumentNo").value = documentNo;
    document.getElementById("viewDocumentDate").value = documentDate;
    document.getElementById("viewCustomerId").value = customerId;

    const lineTable = document.getElementById("viewLineTable").getElementsByTagName("tbody")[0];
    lineTable.innerHTML = ''; // Clear any existing rows

    // Get stored product lines from the dataset and display them in the modal
    const products = JSON.parse(row.dataset.lines);
    products.forEach(product => {
        const newRow = lineTable.insertRow();
        newRow.insertCell(0).innerText = product.productId;
        newRow.insertCell(1).innerText = product.quantity;
    });

    document.getElementById("viewShipmentModal").style.display = "block"; // Show the view modal
}

// Delete shipment
function deleteShipmentRow(row) {
    const tableBody = document.getElementById("combinedTable").getElementsByTagName("tbody")[0];
    tableBody.deleteRow(row.rowIndex - 1);
    showNotification("Shipment row deleted.");
}

// Show notification messages
function showNotification(message) {
    const notificationModal = document.getElementById("notificationModal");
    const notificationMessage = document.getElementById("notificationMessage");
    notificationMessage.innerText = message;
    notificationModal.style.display = "block";
}
